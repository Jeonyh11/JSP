복습

1. jsp는 servlet으로 변환되어 서비스 된다.
2. servlet-container(tomcat)이 jsp를 서블릿으로 변환하는 과정에서 사용하는 폴더는 work폴더
   - tomcat도 개발자가 만든 프로그램으로 비정상적으로 동작할 때가 있음
   - 개발자가 jsp 파일을 수정하였음에도 수정 내역이 반영되지 않을 경우
     work 폴더에 생성된 jsp 변환 파일들(java, class)을 삭제 해주면 새로 만들어 준다.
3. jsp를 서블릿으로 변환하는 시기는 해당 jsp에 대해 최초 요청이 일어 났을 경우에 변환
   - 서블릿으로 생성이 된 이후 같은 파일에 대한 요청은 이미 변환된 파일로 서비스

jsp 구성요소 
1. <%@ %> : 지시자 - jsp페이지에 대한 설정정보
2. <% %> : 스크립틀릿 : 자바 코드를 작성  ==>  JSTL(Java Standard Tag library) 
3. <%= %> : 표현식 : 문자열 출력 		==>  EL(Expression Language, 표현언어) 
4. 주석
5. 선언부 : 변수나 method선언,
	 jsp는 화면 컨텐츠를 생성하는 역할
	변수나 method는 로직 처리시 주로 사용  

-------------------------------------------------------------------------------------------------------------
factorial
재귀함수(메소드) : 자기 자신을 호출하는 함수(메소드)


gwt
Given // 현재 테스트 환경에서 주어진 조건을 기술
When // 테스트를 검증 하고자하는 행위(method call)
Then // 코드를 실행한 결과와 예상한 값이 일치하는지 검증


junit 라이브러리 - 테스트할 때 사용하는 라이브러리

@Test : 테스트 메소드에 붙이는 어노테이션
	해당 어노테이션을 붙이지 않으면 테스트 메소드로 인식되지 않음(테스트 대상에서 제외)
	제한사항
	1.  메소드 시그니쳐를 정해진대로 구성해야함
	     접근제어자 : public 
	     반환타입 : void
  	     인자 : 없음	
	
	텍스트 메소드 통과조건
	1. 테스트 메소드를 실행하는 과정에서 예외가 없이 끝까지 실행된 경우
	2. assert 구문이 있을 경우 assert 구문이 전부 통과 했을때(참으로 인정 되었을때)

@Before : 초기화 메소드에 붙이는 어노테이션
	  @Test 어노테이션이 붙은 테스트 메소드를 호출하기전에 먼저 실행됨
	  @Before ==> @Test (test)
	  @Before ==> @Test (test2)
	  @Before ==> @Test (test3)

@After : @Test 메소드 실행 이후에 실행된 메소드에 붙이는 어노테이션
	자원 해제를 주로 담당

@BeforeClass, @AfterClass
      클래스 단위로 최초 1회씩 호출 되는 메소드
      @BeforeClass
	@Before ==> @Test (test)  ==> @After
	@Before ==> @Test (test2)  ==> @After
	@Before ==> @Test (test3)  ==> @After
      @AfterClass
			
      제한사항 : static 메소드로 선언을 해야함
 	==> 해당 메소드에서 사용하는 필드는 static 필드여야함 -> 사용 빈도가 떨어지는 원인
------------------------------------------------------------------------		

maven package시 test 코드 실행 스킵
mvn package -Dmaven.test.skip=true

-----------------------------------------------


HttpServletRequest : 사용자가 요청을 보낼 때의 정보(파라미터, 헤더, 쿠키...)를 은닉화한 객체
		  servlet-container에서 생성
		  servlet-container가 생성하여 service 메소드를 호출할 때 사용되는 인자 service(doXXX)

주요 사용 용도 ( 1,2,3 중요 )
   1. 파라미터
	. 인위 조작이 불가
	   getParameter는 존재하지만 setParameter 메소드는 없음
		==> request 클래스의 Wrapper 클래스를 이용하여 파라미터 조작가능
   2. 헤더 정보 확인  
   3. 속성(attribute) 정보 설정, 조회
	- 개발자가 인위 조작 가능
	   getAttribute, setAttribute 메소드 존재
   4. contextPath 확인

	서블릿 + 컨텐츠(js, css, image 등)들의 집합
	
	webApplication =(유사) contextPath

	request.getContextPath()를 통해 contextPath 문자열을 얻어올 수 있다.

	서버 하나에 여러개의 웹어플리케이션을 서비스 하는 것이 가능
	==> url 요청시 어떤 웹 어플리케이션을 의미하는지 구분이 필요

	http://도메인/CONTEXT_PATH/경로

	==> css, javascript, image 파일의 경로를 설정 할때 사용
			
			jsp라는 이름으로 contextPath가 설정된 웹어플리케이션의 경우
			webapp/image/brown.png 파일의 경로를 다음과 같이 설정할 수 있다
	        <img src="/jsp/image/brown.png"/>
	        
	        ==> jsp라는 이름의 컨텍스트 패스를 수정할 경우 링크와 관련된 부분을 모두 수정해야하는 문제점이 발생
	        
	         	request.getContextPath()메소드를 통해 유지 보수 문제 해결 가능
	         	<img src="${cp}/image/brown.png"/>
	         	
	         	
	<실습>         	
	webapp/jsp/request.jsp
	
	jsp 파일 내용 : request 객체에서 제공하는 메소드와, 메소드의 리턴값을 확인
	
	<body>
		request.getContentType() : 리턴값을 출력 <br>
		request.getMethod() : 리턴값을 출력 <br>
		request.getRequestURI() : 리턴값을 출력 <br>
		request.getContextPath() : 리턴값을 출력 <br>
		request.getServerPort() : 리턴값을 출력 <br>
	</body>
	-----------------------------------------------------------------